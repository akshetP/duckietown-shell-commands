#!/usr/bin/env bash

set -x


# raspi-config non-interactive commands:
#       sudo raspi-config nonint get_can_expand
#       sudo raspi-config nonint do_expand_rootfs
#       sudo raspi-config nonint get_hostname
#       sudo raspi-config nonint do_hostname %s
#       sudo raspi-config nonint get_boot_cli
#       sudo raspi-config nonint get_autologin
#       sudo raspi-config nonint do_boot_behaviour B1
#       sudo raspi-config nonint do_boot_behaviour B2
#       sudo raspi-config nonint do_boot_behaviour B3
#       sudo raspi-config nonint do_boot_behaviour B4
#       sudo raspi-config nonint get_boot_wait
#       sudo raspi-config nonint do_boot_wait %d
#       sudo raspi-config nonint get_boot_splash
#       sudo raspi-config nonint do_boot_splash %d
#       sudo raspi-config nonint get_overscan
#       sudo raspi-config nonint do_overscan %d
#       sudo raspi-config nonint get_camera
#       sudo raspi-config nonint do_camera %d
#       sudo raspi-config nonint get_ssh
#       sudo raspi-config nonint do_ssh %d
#       sudo raspi-config nonint get_vnc
#       sudo raspi-config nonint do_vnc %d
#       sudo raspi-config nonint get_spi
#       sudo raspi-config nonint do_spi %d
#       sudo raspi-config nonint get_i2c
#       sudo raspi-config nonint do_i2c %d
#       sudo raspi-config nonint get_serial
#       sudo raspi-config nonint get_serial_hw
#       sudo raspi-config nonint do_serial %d
#       sudo raspi-config nonint get_onewire
#       sudo raspi-config nonint do_onewire %d
#       sudo raspi-config nonint get_rgpio
#       sudo raspi-config nonint do_rgpio %d
#       sudo raspi-config nonint get_pi_type
#       sudo raspi-config nonint get_config_var arm_freq /boot/config.txt
#       sudo raspi-config nonint do_overclock %s
#       sudo raspi-config nonint get_config_var gpu_mem /boot/config.txt
#       sudo raspi-config nonint get_config_var gpu_mem_256 /boot/config.txt
#       sudo raspi-config nonint get_config_var gpu_mem_512 /boot/config.txt
#       sudo raspi-config nonint get_config_var gpu_mem_1024 /boot/config.txt
#       sudo raspi-config nonint do_memory_split %d
#       sudo raspi-config nonint get_config_var hdmi_group /boot/config.txt
#       sudo raspi-config nonint get_config_var hdmi_mode /boot/config.txt
#       sudo raspi-config nonint do_resolution %d %d
#       sudo raspi-config nonint get_wifi_country
#       sudo raspi-config nonint do_wifi_country %s


EVENTS_DIR=/data/stats/events
USAGE_DIR=/data/stats/usage
LED_GPIO_PIN=26


setup_hostname() {
    old_hostname=$(cat /etc/hostname)
    new_hostname=$(cat /config/hostname)
    if [ "${old_hostname}" == "${new_hostname}" ]; then
        echo "Hostname is already set to ${new_hostname}"
        return 0
    fi
    echo "Setting the hostname to ${new_hostname}..."
    echo "${new_hostname}" > /etc/hostname
    hostnamectl set-hostname "${new_hostname}"
    setup_etc_hosts
    echo "Hostname set to ${new_hostname}"
    return 1
}


setup_etc_hosts() {
    cat >/etc/hosts <<EOL
127.0.0.1	localhost
127.0.0.1	$(cat /etc/hostname) $(cat /etc/hostname).local

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOL
}

store_event() {
    type=$1
    now=$(date +%s%N)
    # collect event
    echo "{\"type\": \"${type}\", \"stamp\": ${now}}" > "${EVENTS_DIR}/${now}.json"
}


run_on_setup_boot() {
    echo "Setting up the robot for its first ever (aka setup) boot..."
    setup_etc_hosts

    # blink the LED to signal the setup boot (frequency = 10Hz)
    dt-blink-gpio-led ${LED_GPIO_PIN} 0.1 &
    blink_opid=$!

    # copy root overlay from the configuration partition
    if [ -d /config/rootfs ]; then
        sudo rsync --recursive --specials --times /config/rootfs/ /
    fi

    # copy hostname from the configuration partition
    setup_hostname

    # change wifi country
    # Why in 'setup' boot: this is needed asap so that the wifi connection can be established
    WIFI_COUNTRY=$(file-or-default /config/country "US")
    echo "Setting the WiFi country to ${WIFI_COUNTRY}..."
    sudo raspi-config nonint do_wifi_country "${WIFI_COUNTRY}"

    # expand rootfs
    # Why in 'setup' boot: this is needed before the swap file is created in the 'configuration' boot
    sudo raspi-config nonint do_expand_rootfs

    # enabled SSH server
    # Why in 'setup' boot: this is needed to allow remote access to the robot asap
    sudo systemctl enable ssh.service
    sudo systemctl start ssh.service

    # setup wifi connections
    cp -R /config/wifi/* /etc/netplan/
    sudo netplan --debug generate
    sudo netplan --debug apply

    # stop blinking
    sudo kill -TERM $blink_opid
    sleep 0.5
    dt-set-gpio-led ${LED_GPIO_PIN} 0

    echo "Setting up completed!"
}

run_on_configuration_boot() {
    echo "Configuring the robot..."
    setup_etc_hosts

    # blink the LED to signal the configuration boot (frequency = 4Hz)
    dt-blink-gpio-led ${LED_GPIO_PIN} 0.25 &
    blink_opid=$!

    # set POWER_OFF_ON_HALT to 1
    echo "Setting POWER_OFF_ON_HALT to 1..."
    rpi-eeprom-config --out /tmp/boot.conf
    sed -i 's/^POWER_OFF_ON_HALT=0/POWER_OFF_ON_HALT=1/' /tmp/boot.conf
    sudo rpi-eeprom-config --apply /tmp/boot.conf

    # setup /etc/hosts
    echo "Setting up the environment..."

    # activate `booting` service
    mv /etc/avahi/services/dt.booting.service.disabled /etc/avahi/services/dt.booting.service

    # sanitize files
    dt-sanitize-files

    # sudo without a password
    echo "duckie ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers

    # setup ssh access
    echo "Setting up ssh..."
    mkdir -p /home/duckie/.ssh
    touch /home/duckie/.ssh/authorized_keys
    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFiaiFeU0Pc3ZjiGbjJOIx28ghcWPoem8jU1OSeJnbTkKT79vrzjIbYjkBg7uBlXb6kLnbHLWHUnPlLk2IUQTxHHvakubEJkJxePdN6XO+q1sKpEvz+1GL60iBKhRljCZ9h/CcJ78kkyNQkexHT15ZDMhOnUd8c9zxwUHxSjzPSOH5ns8bxjU3oSjmzDEojPnQJmY6Evhf5DVcKXenxkzs4XgDEo+ldKo37i30iUoFCL30OsXCP2tPcn1j39qjL7vnaUBO9WqY8eOssOHAX7/K1dNN1lDvNCKspq/2f05Ss8LopSpe6hOiMnPB0RlotJbZn+784kV1B4nJpqLj+EQr DT2018key" | tee -a /home/duckie/.ssh/authorized_keys
    chmod 755 /home/duckie
    chmod 700 /home/duckie/.ssh
    chmod 600 /home/duckie/.ssh/authorized_keys
    chown -R duckie:duckie /home/duckie

    # add user `duckie` to the `root` group
    adduser duckie root

    # setup docker
    echo "Adding the user to the docker group..."
    adduser duckie docker

    # store the MAC addresses for future reference
    echo "Storing debug information..."
    cp /proc/*info /data/proc
    cat /sys/class/net/eth0/address > /data/stats/MAC/eth0
    cat /sys/class/net/wlan0/address > /data/stats/MAC/wlan0
    cp /etc/os-release /data/stats/os-release

    # make sure the user owns its folders
    echo "Changing the ownership of the user directories..."
    chown -R 1000:1000 /data /code
    chmod -R 775 /data /code

    # create swap
    echo "Setting up swap..."
    # disable default swap space
    sudo dphys-swapfile swapoff /var/swap
    # make a new (bigger) swap space
    dd if=/dev/zero of=/swap0 bs=1M count=2048
    chmod 0600 /swap0
    mkswap /swap0
    echo "/swap0 swap swap" >>/etc/fstab
    swapon -a

    # create tmpfs of size = 75% of the total memory
    PHYMEM_SIZE=$(free --mega | awk '/^Mem:/{print $2}')
    TMPFS_SIZE=$(python3 -c "print(int(0.75 * ${PHYMEM_SIZE}))")
    echo "tmpfs /data/ramdisk tmpfs  defaults,noatime,nosuid,nodev,noexec,mode=0777,size=${TMPFS_SIZE}M 0 0" >> /etc/fstab

    # reload systemctl and restart docker
    systemctl daemon-reload
    systemctl enable docker
    systemctl restart docker

    while ! timeout --signal=INT 5s docker ps; do
        echo 'Waiting for Docker to start...'
        sleep 2
    done

    # run customizable first-boot script
    dt-init-first-boot

    echo "Setting up the containers..."
    dt-run-basics-stacks

    # mark event
    store_event "first_boot"

    # collect usage stats
    mkdir -p "${USAGE_DIR}/disk_image"
    mkdir -p "${USAGE_DIR}/init_sd_card"
    cp /data/stats/disk_image/build.json "${USAGE_DIR}/disk_image/$(date +%s%N).json"
    cp /data/stats/init_sd_card/build.json "${USAGE_DIR}/init_sd_card/$(date +%s%N).json"

    # remove `booting` service
    rm -f /etc/avahi/services/dt.booting.service

    # stop blinking
    sudo kill -TERM $blink_opid
    sleep 0.5
    dt-set-gpio-led ${LED_GPIO_PIN} 0

    echo "Setting up completed!"
}

run_on_every_boot() {
    # blink the LED to signal a regular boot (frequency = 1Hz)
    dt-blink-gpio-led ${LED_GPIO_PIN} 1 &
    blink_opid=$!

    echo "Setting up the robot for this boot..."
    setup_etc_hosts

    # copy hostname from the configuration partition
    setup_hostname
    local needs_reboot=$?
    if [ "$needs_reboot" == "1" ]; then
        echo "Rebooting to apply hostname change..."
        reboot
        exit 0
    fi

    # change wifi country
    WIFI_COUNTRY=$(file-or-default /config/country "US")
    echo "Setting the WiFi country to ${WIFI_COUNTRY}..."
    sudo raspi-config nonint do_wifi_country "${WIFI_COUNTRY}"

    # setup wifi connections
    cp -R /config/wifi/* /etc/netplan/
    sudo netplan --debug generate
    sudo netplan --debug apply

    # run customizable any-boot script
    dt-init-any-boot

    # update avahi service descriptions
    # - robot type
    cp /etc/avahi/services/dt.robot_type.service.template /etc/avahi/services/dt.robot_type.service.temp
    ROBOT_TYPE=$(file-or-default /data/config/robot_type "NOTSET")
    sed -i "s/NOTSET/${ROBOT_TYPE}/g" /etc/avahi/services/dt.robot_type.service.temp
    mv /etc/avahi/services/dt.robot_type.service.temp /etc/avahi/services/dt.robot_type.service
    # - robot configuration
    cp /etc/avahi/services/dt.robot_configuration.service.template /etc/avahi/services/dt.robot_configuration.service.temp
    ROBOT_CONFIGURATION=$(file-or-default /data/config/robot_configuration "NOTSET")
    sed -i "s/NOTSET/${ROBOT_CONFIGURATION}/g" /etc/avahi/services/dt.robot_configuration.service.temp
    mv /etc/avahi/services/dt.robot_configuration.service.temp /etc/avahi/services/dt.robot_configuration.service

    # launch triggers handlers
    dt-serve-triggers

    # log containers
    if [ -d /data/logs/containers ]; then
        for d in /data/logs/containers/*; do
            if [ -d "$d" ]; then
                # $d is a directory, check if we have a container with that name
                container_name=$(basename "${d}")
                echo "Found directory ${d}, enabling logging for container ${container_name}"
                if docker ps -q -f name="${container_name}" ; then
                    log_file=$d/0.log
                    echo "Container ${container_name} found. Logging to file ${log_file}"
                    # container found
                    docker logs --follow --timestamps "${container_name}" > "${log_file}" &
                else
                    echo "Container ${container_name} not found. Skipping logging."
                fi
            fi
        done
    fi

    # mark event
    store_event "boot"

    # stop blinking
    sudo kill -TERM $blink_opid
    sleep 0.5
    dt-set-gpio-led ${LED_GPIO_PIN} 1

    echo "Robot configured!"
}

SETUP_BOOT_EVIDENCE_FILE="/boot/dt.setup.boot.evidence"
CONFIGURATION_BOOT_EVIDENCE_FILE="/boot/dt.configuration.boot.evidence"

if [ -f "$CONFIGURATION_BOOT_EVIDENCE_FILE" ]; then
    echo "$CONFIGURATION_BOOT_EVIDENCE_FILE exists, robot is configured, run default boot sequence"
    run_on_every_boot 2>&1 | tee /data/logs/this_boot_init.log
else
    if [ -f "$SETUP_BOOT_EVIDENCE_FILE" ]; then
        echo "$SETUP_BOOT_EVIDENCE_FILE exists, robot is setup, run configuration boot sequence"
        run_on_configuration_boot 2>&1 | tee /data/logs/configuration_boot_init.log
        # mark robot as 'configured'
        touch "$CONFIGURATION_BOOT_EVIDENCE_FILE"
        reboot
    else
        echo "$SETUP_BOOT_EVIDENCE_FILE doe NOT exist, run setup boot sequence"
        run_on_setup_boot 2>&1 | tee /data/logs/setup_boot_init.log
        # mark robot as 'setup'
        touch "$SETUP_BOOT_EVIDENCE_FILE"
        reboot
    fi
fi
