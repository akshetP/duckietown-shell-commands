#!/usr/bin/env bash

set -x

EVENTS_DIR=/data/stats/events
USAGE_DIR=/data/stats/usage


setup_etc_hosts() {
    cat >/etc/hosts <<EOL
127.0.0.1	localhost
127.0.0.1	$(cat /etc/hostname) $(cat /etc/hostname).local

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOL
}

store_event() {
    type=$1
    now=$(date +%s%N)
    # collect event
    echo "{\"type\": \"${type}\", \"stamp\": ${now}}" > "${EVENTS_DIR}/${now}.json"
}


run_on_setup_boot() {
    echo "Setting up the robot for its first ever (aka setup) boot..."

    # copy configuration files
    if [ -d /config ]; then
        if [ -f /config/hostname ]; then
            cp /config/hostname /etc/hostname
            chmod 644 /etc/hostname
            cp /config/hostname /config/hostname.loaded
        fi
        if [ -f /config/wpa_supplicant.conf ]; then
            cp /config/wpa_supplicant.conf /etc/wpa_supplicant.conf
            chmod 644 /etc/wpa_supplicant.conf
            cp /config/wpa_supplicant.conf /config/wpa_supplicant.conf.loaded
        fi
    fi

    echo "Setting up completed!"
}

run_on_configuration_boot() {
    echo "Configuring the robot..."

    # setup /etc/hosts
    echo "Setting up the environment..."
    setup_etc_hosts

    # activate `booting` service
    mv /etc/avahi/services/dt.booting.service.disabled /etc/avahi/services/dt.booting.service

    # sanitize files
    dt-sanitize-files

    # sudo without a password
    echo "duckie ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers

    # setup ssh access
    echo "Setting up ssh..."
    mkdir -p /home/duckie/.ssh
    touch /home/duckie/.ssh/authorized_keys
    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFiaiFeU0Pc3ZjiGbjJOIx28ghcWPoem8jU1OSeJnbTkKT79vrzjIbYjkBg7uBlXb6kLnbHLWHUnPlLk2IUQTxHHvakubEJkJxePdN6XO+q1sKpEvz+1GL60iBKhRljCZ9h/CcJ78kkyNQkexHT15ZDMhOnUd8c9zxwUHxSjzPSOH5ns8bxjU3oSjmzDEojPnQJmY6Evhf5DVcKXenxkzs4XgDEo+ldKo37i30iUoFCL30OsXCP2tPcn1j39qjL7vnaUBO9WqY8eOssOHAX7/K1dNN1lDvNCKspq/2f05Ss8LopSpe6hOiMnPB0RlotJbZn+784kV1B4nJpqLj+EQr DT2018key" | tee -a /home/duckie/.ssh/authorized_keys
    chmod 755 /home/duckie
    chmod 700 /home/duckie/.ssh
    chmod 600 /home/duckie/.ssh/authorized_keys
    chown -R duckie:duckie /home/duckie

    # add user `duckie` to the `root` group
    adduser duckie root

    # setup docker
    echo "Adding the user to the docker group..."
    adduser duckie docker

    # store the MAC addresses for future reference
    echo "Storing debug information..."
    cp /proc/*info /data/proc
    cat /sys/class/net/eth0/address > /data/stats/MAC/eth0
    cat /sys/class/net/wlan0/address > /data/stats/MAC/wlan0
    cp /etc/os-release /data/stats/os-release

    # make sure the user owns its folders
    echo "Changing the ownership of the user directories..."
    chown -R 1000:1000 /data /code
    chmod -R 775 /data /code

    # create swap
    echo "Setting up swap..."
    # disable default swap space
    sudo dphys-swapfile swapoff /var/swap
    # make a new (bigger) swap space
    dd if=/dev/zero of=/swap0 bs=1M count=2048
    chmod 0600 /swap0
    mkswap /swap0
    echo "/swap0 swap swap" >>/etc/fstab
    swapon -a

    # create tmpfs of size = 75% of the total memory
    PHYMEM_SIZE=$(free --mega | awk '/^Mem:/{print $2}')
    TMPFS_SIZE=$(python3 -c "print(int(0.75 * ${PHYMEM_SIZE}))")
    echo "tmpfs /data/ramdisk tmpfs  defaults,noatime,nosuid,nodev,noexec,mode=0777,size=${TMPFS_SIZE}M 0 0" >> /etc/fstab

    # reload systemctl and restart docker
    systemctl daemon-reload
    systemctl enable docker
    systemctl restart docker

    while ! timeout --signal=INT 5s docker ps; do
        echo 'Waiting for Docker to start...'
        sleep 2
    done

    # TODO: create duckietown_portainer-data docker volume with an initialized DB

    # run customizable first-boot script
    dt-init-first-boot

    echo "Setting up the containers..."
    dt-autoboot

    # mark event
    store_event "first_boot"

    # collect usage stats
    mkdir -p "${USAGE_DIR}/disk_image"
    mkdir -p "${USAGE_DIR}/init_sd_card"
    cp /data/stats/disk_image/build.json "${USAGE_DIR}/disk_image/$(date +%s%N).json"
    cp /data/stats/init_sd_card/build.json "${USAGE_DIR}/init_sd_card/$(date +%s%N).json"

    # remove `booting` service
    rm -f /etc/avahi/services/dt.booting.service

    # Add the hut i2c mux to the kernel device tree
    dtc -I dts -O dtb -@ -o /boot/overlays/duckietown_dd_hut_v1.dtbo /boot/overlays/duckietown_dd_hut_v1.dts

    echo "Setting up completed!"
}

run_on_every_boot() {
    echo "Setting up the robot for this boot..."

    # copy configuration files
    if [ -d /config ]; then
        if [ -f /config/wpa_supplicant.conf ]; then
            cp /config/wpa_supplicant.conf /etc/wpa_supplicant.conf
            chmod 644 /etc/wpa_supplicant.conf
            cp /config/wpa_supplicant.conf /config/wpa_supplicant.conf.loaded
        fi
    fi

    # setup /etc/hosts
    setup_etc_hosts

    # run customizable any-boot script
    dt-init-any-boot

    # launch triggers handlers
    dt-serve-triggers

    # log containers
    if [ -d /data/logs/containers ]; then
        for d in /data/logs/containers/*; do
            if [ -d "$d" ]; then
                # $d is a directory, check if we have a container with that name
                container_name=$(basename "${d}")
                echo "Found directory ${d}, enabling logging for container ${container_name}"
                if docker ps -q -f name="${container_name}" ; then
                    log_file=$d/0.log
                    echo "Container ${container_name} found. Logging to file ${log_file}"
                    # container found
                    docker logs --follow --timestamps "${container_name}" > "${log_file}" &
                else
                    echo "Container ${container_name} not found. Skipping logging."
                fi
            fi
        done
    fi

    # mark event
    store_event "boot"

    echo "Robot configured!"
}

SETUP_BOOT_EVIDENCE_FILE="/boot/dt.setup.boot.evidence"
CONFIGURATION_BOOT_EVIDENCE_FILE="/boot/dt.configuration.boot.evidence"

if [ -f "$CONFIGURATION_BOOT_EVIDENCE_FILE" ]; then
    echo "$CONFIGURATION_BOOT_EVIDENCE_FILE exists, robot is configured, run default boot sequence"
    run_on_every_boot 2>&1 | tee /data/logs/this_boot_init.log
else
    if [ -f "$SETUP_BOOT_EVIDENCE_FILE" ]; then
        echo "$SETUP_BOOT_EVIDENCE_FILE exists, robot is setup, run configuration boot sequence"
        run_on_configuration_boot 2>&1 | tee /data/logs/configuration_boot_init.log
        # mark robot as 'configured'
        touch "$CONFIGURATION_BOOT_EVIDENCE_FILE"
        reboot
    else
        echo "$SETUP_BOOT_EVIDENCE_FILE does NOT exist, run setup boot sequence"
        run_on_setup_boot 2>&1 | tee /data/logs/setup_boot_init.log
        # mark robot as 'setup'
        touch "$SETUP_BOOT_EVIDENCE_FILE"
        reboot
    fi
fi
