#!/usr/bin/env bash

set -x

SD_DEVICE=/dev/mmcblk0
ROOT_PART_ID=2
EVENTS_DIR=/data/stats/events
USAGE_DIR=/data/stats/usage


setup_etc_hosts() {
    cat >/etc/hosts <<EOL
127.0.0.1	localhost
127.0.0.1	$(cat /etc/hostname) $(cat /etc/hostname).local

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOL
}

store_event() {
    type=$1
    now=$(date +%s%N)
    # collect event
    echo "{\"type\": \"${type}\", \"stamp\": ${now}}" > "${EVENTS_DIR}/${now}.json"
}

run_on_first_boot() {
    echo "Setting up the robot for its first ever boot..."

    # setup /etc/hosts
    echo "Setting up the environment..."
    setup_etc_hosts

    # activate `booting` service
    mv /etc/avahi/services/dt.booting.service.disabled /etc/avahi/services/dt.booting.service

    # sanitize files
    dt-sanitize-files

    # sudo without a password
    echo "duckie ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers

    # setup ssh access
    echo "Setting up ssh..."
    mkdir -p /home/duckie/.ssh
    touch /home/duckie/.ssh/authorized_keys
    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFiaiFeU0Pc3ZjiGbjJOIx28ghcWPoem8jU1OSeJnbTkKT79vrzjIbYjkBg7uBlXb6kLnbHLWHUnPlLk2IUQTxHHvakubEJkJxePdN6XO+q1sKpEvz+1GL60iBKhRljCZ9h/CcJ78kkyNQkexHT15ZDMhOnUd8c9zxwUHxSjzPSOH5ns8bxjU3oSjmzDEojPnQJmY6Evhf5DVcKXenxkzs4XgDEo+ldKo37i30iUoFCL30OsXCP2tPcn1j39qjL7vnaUBO9WqY8eOssOHAX7/K1dNN1lDvNCKspq/2f05Ss8LopSpe6hOiMnPB0RlotJbZn+784kV1B4nJpqLj+EQr DT2018key" | tee -a /home/duckie/.ssh/authorized_keys
    chmod 755 /home/duckie
    chmod 700 /home/duckie/.ssh
    chmod 600 /home/duckie/.ssh/authorized_keys
    chown -R duckie:duckie /home/duckie

    # add user `duckie` to the `root` group
    adduser duckie root

    # setup docker
    echo "Adding the user to the docker group..."
    adduser duckie docker

    # store the MAC addresses for future reference
    echo "Storing debug information..."
    cp /proc/*info /data/proc
    cat /sys/class/net/eth0/address > /data/stats/MAC/eth0
    cat /sys/class/net/wlan0/address > /data/stats/MAC/wlan0
    cp /etc/os-release /data/stats/os-release

    # make sure the user owns its folders
    echo "Changing the ownership of the user directories..."
    chown -R 1000:1000 /data /code
    chmod -R 775 /data /code

    # create swap
    echo "Setting up swap..."
    # disable default swap space
    sudo dphys-swapfile swapoff /var/swap
    # make a new (bigger) swap space
    dd if=/dev/zero of=/swap0 bs=1M count=2048
    chmod 0600 /swap0
    mkswap /swap0
    echo "/swap0 swap swap" >>/etc/fstab
    swapon -a

    # create tmpfs of size = 75% of the total memory
    PHYMEM_SIZE=$(free --mega | awk '/^Mem:/{print $2}')
    TMPFS_SIZE=$(python3 -c "print(int(0.75 * ${PHYMEM_SIZE}))")
    echo "tmpfs /data/ramdisk tmpfs  defaults,noatime,nosuid,nodev,noexec,mode=0777,size=${TMPFS_SIZE}M 0 0" >> /etc/fstab

    # reload systemctl and restart docker
    systemctl daemon-reload
    systemctl enable docker
    systemctl restart docker

    while ! timeout --signal=INT 5s docker ps; do
        echo 'Waiting for Docker to start...'
        sleep 2
    done

    # TODO: create duckietown_portainer-data docker volume with an initialized DB

    # run customizable first-boot script
    dt-init-first-boot

    echo "Setting up the containers..."
    dt-autoboot

    # mark event
    store_event "first_boot"

    # collect usage stats
    mkdir -p "${USAGE_DIR}/disk_image"
    mkdir -p "${USAGE_DIR}/init_sd_card"
    cp /data/stats/disk_image/build.json "${USAGE_DIR}/disk_image/$(date +%s%N).json"
    cp /data/stats/init_sd_card/build.json "${USAGE_DIR}/init_sd_card/$(date +%s%N).json"

    # remove `booting` service
    rm -f /etc/avahi/services/dt.booting.service

    echo "Setting up completed!"
}

run_on_every_boot() {
    echo "Setting up the robot for this boot..."

    # setup /etc/hosts
    setup_etc_hosts

    # look for hostname changes
    if [ -f /etc/.hostname ]; then
        if cmp -s /etc/hostname /etc/.hostname; then
            echo "Recreating containers after hostname change..."
            dt-autoboot --force-recreate
        fi
    fi

    # run customizable any-boot script
    dt-init-any-boot

    # launch triggers handlers
    dt-serve-triggers

    # keep track of hostname changes
    cp /etc/hostname /etc/.hostname

    # mark event
    store_event "boot"

    echo "Setting up completed!"
}

FIRST_BOOT_EVIDENCE_FILE="/boot/dt.first.boot.evidence"
if test -f "$FIRST_BOOT_EVIDENCE_FILE"; then
    echo "$FIRST_BOOT_EVIDENCE_FILE exists so we assume this is not the first boot!"
    run_on_every_boot 2>&1 | tee /data/logs/this_boot_init.log
else
    echo "$FIRST_BOOT_EVIDENCE_FILE does not exist so we assume this is the first boot!"
    run_on_first_boot 2>&1 | tee /data/logs/first_boot_init.log
    touch "$FIRST_BOOT_EVIDENCE_FILE"
    reboot
fi
